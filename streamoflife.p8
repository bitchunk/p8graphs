pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
--knutil_0.14.0
--@shiftalow / bitchunk
version='v0.14.0'
--set1:basic
function amid(...)
	return mid(-...,...)
end

function bpack(w,s,b,...)
return b and flr(0x.ffff<<add(w,deli(w,1))&b)<<s|bpack(w,s-w[1],...) or 0
end

function bunpack(b,s,w,...)
if w then
return flr(0x.ffff<<w&b>>>s),bunpack(b,s-(... or 0),...)
end
end

function cat(f,...)
foreach({...},function(s)
for k,v in pairs(s) do
if tonum(k) then
add(f,v)
else
f[k]=v
end
end
end)
return f
end

function comb(k,v)
local a={}
for i=1,#k do
a[k[i]]=v[i]
end
return a
end

function ecpalt(p)
	palt()
	tmap(p,function(v,i)
		palt(i,v==0)
	end)
end

function htd(b,n)
	local a={}
	foreach(msplit(b,n or 2),function(v)
		add(a,tonum('0x'..v))
	end)
	return a
end

function htbl(ht,c)
local t,k,rt={}
ht,c=split(ht,'') or ht,c or 1
while 1 do
local p=ht[c]
c+=1
if p=='{' or p=='=' then
rt,c=htbl(ht,c)
if not k then
add(t,rt)
else
t[k],k=p=='{' and rt or rt[1]
end
elseif not p or p=='}' or p==';' or p==' ' then
if k=='false' then k=false
elseif k=='nil' then k=nil
else k=k=='true' or tonum(k) or k
end
add(t,k)
rt,k=p and c or nil
if p~=' ' then
break
end
elseif p~="\n" then
k=(k or '')..p
end
end
return t,rt
end

function inrng(...)
return mid(...)==...
end

function join(d,s,...)
return not s and '' or not ... and s or s..d..join(d,...)
end
function join(d,s,...)
	local a={...}
	while a[1] do
	s..=d..deli(a,1)
	end
	return s or ''
end

function mkpal(p,s,...)
	if s then
		return comb(htd(p,1) or p,htd(s,1) or s),mkpal(p,...)
	end
end

function msplit(s,d,...)
	local t=split(s,d or ' ',false)
	if ... then
		for i,v in pairs(t) do
			t[i]=msplit(v,...)
		end
	end
	return t
end

function oprint(s,x,y,f,o,p)
 foreach(split(p or '\+ff\^h,\+gf\^h,\+hf\^h,\+fg\^h,\+hg\^h,\+fh\^h,\+gh\^h,\+hh\^h,'),function(v)
  ?v..s,x,y,v~='' and o or f
 end)
end

function rceach(p,f)
p=_rfmt(p)
for y=p.y,p.ey do
for x=p.x,p.ex do
f(x,y,p)
end
end
end

function replace(s,f,r,...)
local a,i='',1
while i<=#s do
if sub(s,i,i+#f-1)~=f then
a..=sub(s,i,i)
i+=1
else
a..=r or ''
i+=#f
end
end
return ... and replace(a,...) or a
end

function tbfill(v,s,e,...)
local t={}
for i=s,e do
t[i]=... and tbfill(v,...) or v
end
return t
end

function tmap(t,f)
for i,v in pairs(t) do
v=f(v,i)
if v~=nil then
t[i]=v
end
end
return t
end

function tohex(v,d)
v=sub(tostr(tonum(v),1),3,6)
while v[1]=='0' and #v>(d or 0) do
v=sub(v,2)
end
return v
end

function ttable(p)
return count(p) and p
end
-->8
--set2:objects
--exrect
_mkrs,_hovk,_mnb=htbl'x y w h ex ey r p'
,htbl'{x y}{x ey}{ex y}{ex ey}'
,htbl'con hov ud rs rf cs cf os of cam'
function _rfmt(p)
local x,y,w,h=unpack(ttable(p) or split(p,' ',true))
return comb(_mkrs,{x,y,w,h,x+w-1,y+h-1,w/2,p})
end

function exrect(p)
local o=_rfmt(p)
return cat(o,comb(_mnb,{
function(p,y)
if y then
return inrng(p,o.x,o.ex) and inrng(y,o.y,o.ey)
else
return o.con(p.x,p.y) and o.con(p.ex,p.ey)
end
end
,function(r,i)
local h
for i,v in pairs(_hovk) do
h=h or o.con(r[v[1]],r[v[2]])
end
return h or i==nil and r.hov(o,true)
end
,function(p,y,w,h)
return cat(
o,_rfmt((tonum(p) or not p) and {p or o.x,y or o.y,w or o.w,h or o.h} or p
))
end
,function(col,f)
local c=o.cam
f=(f or rect)(o.x-c.x,o.y-c.y,o.ex-c.x,o.ey-c.y,col)
return o
end
,function(col)
return o.rs(col,rectfill)
end
,function(col,f)
(f or circ)(o.x+o.r-o.cam.x,o.y+o.r-o.cam.y,o.w/2,col)
return o
end
,function(col)
return o.cs(col,circfill)
end
,function(col)
return o.rs(col,oval)
end
,function(col)
return o.rs(col,ovalfill)
end
,{x=0,y=0}
}))
end

--scenes
_odkey=msplit'_rate _cnt _rm _fst _lst _nm _dur _prm'
function scorder(...)
local o={}
return cat(o,comb(_odkey,{
function(d,r,c)
local f,t=unpack(ttable(d) or msplit(d))
r=r or _dur
return min(c or _cnt,r)/max(r,1)*(t-f)+f
end
,0,false,true,false
,...
}))
end

_scal={}
function mkscenes(keys)
return tmap(ttable(keys) or {keys},function(v)
local o={}
_scal[v]=cat(o,comb(msplit'ps st rm cl fi cu us env tra ords nm',{
function(...)
return add(o.ords,scorder(...))
end
,function(...)
o.cl()
return o.ps(...)
end
,function(s)
s=s and o.fi(s) or not s and o.cu()
if s then
del(o.ords,s)._rm=true
end
return s
end
,function()
local s={}
while add(s,o.rm()) do
end
return s
end
,function(key)
for v in all(o.ords) do
if v._nm==key or _nm==key or key==v then
return v end
end
end
,function(n)
return o.ords[n or 1]
end
,function(...)
return add(o.ords,scorder(...),1)
end
,function(c)
foreach(_odkey,function(v)
_ENV[v],c[v]=c[v],_ENV[v]
end)
return c
end
,function(n)
local c=o.cu(n)
if c then
o.env(c)
_cnt+=1
_cnt,_fst,_lst=_cnt==0x7fff and 1 or _cnt,_cnt==1,inrng(_dur,1,_cnt)
if _rm or _nm and _ENV[_nm] and _ENV[_nm](c) or _lst then
o.rm(o.env(c))
else
o.env(c)
end
end
end
,{},v
}))
return o
end)
end

function scmd(b,p,...)
return tmap(msplit(replace(b,"\t",""),"\n",' '),function(v)
local s,m,f,d=unpack(v)
return _scal[s] and _scal[s][m](f,tonum(d),p or {}) or false
end)
,... and scmd(...)
end
cmdscenes=scmd

function transition(v)
 v.tra()
end
-->8
--set3:debugging
--dmp
function dmp(v,q,s)
	if not s then
	 q,s,_dmpx,_dmpy="\f6","\n",0,-1
	end
	local p,t=s
	tmap(ttable(v) or {v},function(str,i)
		t=type(str)
		if ttable(str) then
			q,p=dmp(str,q..s..i.."{",s.." ")..s.."\f6}",s
		else
		 q..=join('',p,i
		 ,comb(msplit"number string boolean function nil"
		 ,msplit"\ff#\f6:\ff \fc$\f6:\fc \fe%\f6:\fe \fb*\f6:\fb \f2!\f6:\f2"
			)[t],tostr(str),"\f6 ")
			p=""
		end
	end)
	q..=t and "" or s.."\f2!\f6:\f2nil"
	::dmp::
	_update_buttons()
	if s=="\n" and not btnp'5' then
		flip()
		cls()
		?q,_dmpx*4,_dmpy*6
		_dmpx+=_kd'0'-_kd'1'
		_dmpy+=_kd'2'-_kd'3'
		goto dmp
	end
	return q
end

function _kd(d)
return tonum(btn(d))
end

--dbg
function dbg(...)
	local p,d={},{...}
	for i=1,#d do
		if add(p,tostr(d[i]))=='d?' then
			tmap(_dbgv,function(v,i)
				oprint(join(' ',unpack(v)),0,128-i*6,5,7)
			end)
			_dbgv,p={}
		end
	end
	add(_dbgv,p,1)
end
dbg'd?'
-->8
--main
function _init()
upd=mkscenes(msplit'ftr rec')
drw=mkscenes(msplit'drw red')
trs=mkscenes(msplit'fsc trs')
flwb={}

scmd([[
drw st flowerd 0
ftr st flowert 0
]]
)

flowerp8life()
--sframes=segfloweroflife()
--sframes=segmentoflife()
--sframes=floweroflife()
--sframes=seedoflife()

poke('0x8000',0)
menuitem(1,'●record gif ⁙1',function()
	poke('0x8000',1)
	extcmd'reset'
end)
menuitem(2,'●record gif loop',function()
	poke('0x8000',2)
	extcmd'reset'
end)
end
function _update60()
	foreach(upd,transition)
end
function _draw()
	cls()

	foreach(drw,transition)
--	for i=1,15 do
--	rectfill(i*4,0,i*4+4,4,i)
--	?tohex(i,1),i*4,5
--	end

--	dbg(stat(0))
	?dbg'd?'
--		stop()

end
-->8
--draw update process
function flowert()

	tmap(_scal.fsc.ords,function(v,i)
--	dbg(v._nm..' '..v._cnt..' '..(v._prm.sub and 'p' or ''))
		_scal.fsc.tra(i)
	end)
	--fsetscript
		
	tmap(_scal.trs.ords,function(v,i)
--	dbg(v._nm..' '..v._cnt..' '..(v._prm.sub and 'p' or ''))
		_scal.trs.tra(i)
	end)
	--flowerc
	--flowerde

--	dbg(#_scal.fsc.ords)
end

function flset(fbuf,fsp,w,f)

local s=join(' '
,"trs ps flowerc"
,w
)
--flower set params, flower buffer, draw function
return scmd(s,{fsp,fbuf,f,sub=_prm.sub})
end

function fsetscript()
	if _dur==0 then
		if _fst then
			_prm.fltbl={}
			_prm.ord=nil
			_prm.flws=_prm.flws or {}
			tmap(_prm,function(v,i)
				if tonum(i) then
					add(_prm.fltbl,v)
				end
			end)
		end
		
		if not _prm.ord or _prm.ord._rm then
			if not _prm.fltbl[1] then
				scmd([[
					fsc ps fsetscript 0
				]],_prm)
				return 1
			end	
			local o=flset(_prm.flws,unpack(deli(_prm.fltbl,1)))
			_prm.ord=o[#o]
		end
	else
		if _fst then
		_prm=clone(_prm)
		end
		
		if _lst then
			tmap(_prm,function(v,i)
				if tonum(i) then
					v[1]=clone(v[1])
					tmap(v[1],function(v,i)
						v[1]+=#flwb
						return v
					end)
				end
			end)
			_prm.sub=true
			scmd([[
				fsc ps fsetscript 0
			]],_prm)
		end	
	end
	
end

--function flowers(fpat,flws,)
function flowers(fpat,fbuf)

	tmap(fpat,function(v,i)
		local i,n,r,c,d,a,fn=unpack(v)
		local f,fb,sc,sb={},{}
		local pf,fpp
		for j=1,n do
			pf,fpp=
			fbuf[i] and fbuf[i][j] or pf
			,{}
			local x,y,sr,sa,sd,sfn=
			64,64,0,0,0

			if pf then
				-- pre params use as start params
				fpp,sa,sd,sfn=unpack(pf)
				x,y,sr,sc,sb=unpack(fpp)
			end

			fpp={x,y,sr,c,sb}
			f[j]={
				fpp,sa,sd --current
				,fn or sfn --drawfn
				,sr,sa,sd,fpp  --start
				,r,a,d,n,{}				--end & prms
			}
--			dmp(sb)
		end
		fbuf[i]=f
	end)
end

function flowerc()
	if _fst then
		flowers(unpack(_prm))
	end
	fbuf=_prm[2]
	tmap(fbuf,function(v,i)
		tmap(v,function(v,j)
			local pr
			,fpp,a,d
			,fn
			,sr,sa,sd,sb
			,er,ea,ed,n,eb=sin(_rate'0 -0.25'),unpack(v)
--			dmp()
			local cntp=_cnt*pr
			a=_rate({sa,ea},_dur,cntp)
			d=_rate({sd,ed},_dur,cntp)
			r=_rate({sr,er},_dur,cntp)\1

			local ex,ey=
			d*sin(j/n+a)+64
			,d*cos(j/n+a)+64

			if _lst then
				sr,sa,sd=er,ea,ed
			end

			fpp={ex,ey,r,fpp[4]}
			if fn then -- segfill process
				fpp[5]=fpp[5] or {}
				--sb: start params backup
				--make segfill group
				local sba=sb[5] or {}
				local dl=#{unpack(fn,4)}
--				dbg(dl)
				for i=1,dl do
					local b={ex,ey,r,fn[3+i] or fpp[4]
					,_rate({sba[i] and sb[5][i][5] or j/n,(fn[2] or 0)+j/n+i/fn[3]},_dur,cntp)
					,_rate({sba[i] and sb[5][i][6] or 1/fn[3],1/(fn[3] or 0)},_dur,cntp)
					}
					fpp[5][i]=b
				end
				sb[5]=fpp[5]
--				dmp(fpp)
			end

			return {
				fpp,a,d
				,fn
				,sr,sa,sd,sb
				,er,ea,ed,n,{}
			}
		end)
		flwb[i]=v
	end)

end

function flowerd()
local c=0
	tmap(flwb,function(v)
		tmap(v,function(v)
				if v[1][5] then
					local f=_ENV[v[4][1]]
					if f then
						tmap(v[1][5],function(v)
--						if btn(5) then
--					flip()
--					flip()
--					flip()
--					flip()
----					rectfill(0,0,16,6,0)
----					?c,0,0,7
--					end
							f(unpack(v))
							c+=1
						end)
					end
				else
					circ(unpack(v[1]))
				end
		end)

	end)
--	dbg(c)
--	flwb={}
end

function recv()
--less frame drop in update process
	if _fst then
		scmd[[red ps recds 1]]
	elseif _lst then
		scmd[[red ps recde 1]]
	end
end

function recds()
	extcmd'rec'
end

function recde()
	extcmd'video'
end
-->8
--exlib set
function segfill(x,y,r,c,s,d)
	color(c)
	local e=s+mid(d,1,-1)
	y=(y+0.5)\1
	r=(r+0.5)\1
	if s>e then
		s,e=e,s
	end
	local sx,sy,ex,ey,se=
							sin(s)*r,cos(s)*r
							,sin(e)*r,cos(e)*r
							,1
	if sy>ey or sy==ey and sx>0 then
		sx,sy,ex,ey,se=ex,ey,sx,sy
		,-1
	end
	if e-s<0.075 then
		line(sx+x,sy+y,ex+x,ey+y)
	elseif e-s>=1 then
		circfill(x,y,r)
	else
		local sel,sr,er=e-s,s%1\0.5,e%1\0.5
		--top-r to start-y
		local pr,u,d,k,lr,rr,t=
		er,-r,sy,1
		,r-y+0.5,r+y+0.5
		while sr do
--			color(deli(col) or c)
			if er>0 and sr<1 or sel>0.5 and er==sr then
				for u=y+u,y+d-0.5*k,k do
					local xi=sqrt((lr+u)*(rr-u))&0xffff
					rectfill(x-xi,u,x+xi,u)
				end
			end
			--end-y to bottom-r (switch start to end)
			k,u,d,er,sr,pr=-1,r,ey,sr,pr
		end
--		if not btn(0) then
		--start-y to end-y
--		color(deli(col) or c)
		sy-=0.5
		ey+=0.5
		local i,xr=(ex-sx)/(ey-sy),sx+x
		for u=y+sy,y+min(r,ey) do
			rectfill(x+(sqrt((lr+u)*(rr-u))&0xffff)*se,u+1,xr,u+1)
			xr+=i
		end
--		end
	end

end

-- segfill & trifill ver
function sectfill(x,y,r,c,s,d)
	d=mid(d,1,-1)
	local e=s+d
	if s>e then
		s,e=e,s
	end

	d=abs(d)
	while d>=0.5 do
--		c=deli(col) or c
		segfill(x,y,r,c,s,0.506)
		s+=0.5
		d-=0.5
	end
	if d>0 then
		local sx,sy,ex,ey=
								sin(s)*r,cos(s)*r
								,sin(e)*r,cos(e)*r
--		c=deli(col) or c
		trifill(sx+x,sy+y,x,y,ex+x,ey+y,c)
		
--		c=deli(col) or c
		segfill(x,y,r,c,s,d)
	end

end


function trifill(l,t,c,m,r,b,col)
	color(col)
	local a=rectfill
	::_w_::
 if(t>m)l,t,c,m=c,m,l,t
 if(m>b)c,m,r,b=r,b,c,m
 if(t>m)l,t,c,m=c,m,l,t

	local q,p=l,c
	if (q<c) q=c
	if (q<r) q=r
	if (p>l) p=l
	if (p>r) p=r
	if b-t>q-p then
		l,t,c,m,r,b,col=t,l,m,c,b,r
		goto _w_
	end

	local e,j,i=l,(r-l)/(b-t)
	while m do
		i=(c-l)/(m-t)
		local f=(m&0xffff)-1
		f=f>127 and 127 or f
		if(t<0)t,l,e=0,l-i*t,b and e-j*t or e
		if col then
			for t=t&0xffff,f do
				a(l,t,e,t)
				l=i+l
				e=j+e
			end
		else
			for t=t&0xffff,f do
				a(t,l,t,e)
				l=i+l
				e=j+e
			end
		end
		l,t,m,c,b=c,m,b,r
	end
	if i<8 and i>-8 then
		if col then
			pset(r,t)
		else
			pset(t,r)
		end
	end
end


function clone(t)
	return tmap(cat({},t),function(v)
	if ttable(v) then
		return clone(v)
	end
	return v
	end)
end

--[[
	- fquery              -- flower effect script.
	- @param  string q    -- querying effects with "htbl" parsing syntax.
	- @param  string p    -- specify palette as a contiguous hexadecimal string.
	- @param  number ...  -- delay time.
	- @description
		-- the palette is specified by a string such as 010203040506...
]]--
function fquery(q,p,...)
	local sframes=0
	pal(htd(p or '0102030405060708090a0b0c0d0e0f'),1)
	local s=''

	tmap({...},function(v,i)
		s..=[[fsc ps fsetscript ]]..v..'\n'
		sframes+=v
	end)
	q=htbl(q)
	local p,f=peek(0x8000),0
	if p~=0 then
		tmap(q,function(v,i)
			sframes+=v[2] or 0
			if i==1 then
				f=sframes
			end
		end)
		
		if p==1 then --onece
			sframes+=f
			s..="\nrec ps recv "..sframes
		elseif p==2 then --loop
			s..="\nrec ps nil "..f
			s..="\nrec ps recv "..sframes
		end
	end
	scmd(s,q)
end
-->8
--sample data
function flowerp8life()
fquery([[
{{
{1 4 12 12 12 0.0 {segfill 0.125 4 7 7 7 7}}
{2 1 12 12 30 0.0 {segfill 0.125 4 7 12 12 12}}
{3 1 12 12 30 0.125 {segfill 0.25 4 7 11 11 11}}
{4 1 12 12 30 0.25 {segfill 0.375 4 7 10 10 10}}
{5 1 12 12 30 0.375 {segfill 0.5 4 7 9 9 9}}
{6 1 12 12 30 0.5 {segfill 0.625 4 7 8 8 8}}
{7 1 12 12 30 0.625 {segfill 0.75 4 7 15 15 15}}
{8 1 12 12 30 0.75 {segfill 0.875 4 7 14 14 14}}
{9 1 12 12 30 0.875 {segfill 1 4 7 13 13 13}}
} 60}
{{
} 30}
{{
{1 8 12 12 12 0.0 {segfill 0.125 8 7 7 7 7}}
{2 1 12 12 30 0.0 {segfill -0.1667 3 7 12 12 12}}
{3 1 12 12 30 0.125 {segfill -0.0417 3 7 11 11 11}}
{4 1 12 12 30 0.25 {segfill 0.08333 3 7 10 10 10}}
{5 1 12 12 30 0.375 {segfill 0.2083 3 7 9 9 9}}
{6 1 12 12 30 0.5 {segfill 0.333 3 7 8 8 8}}
{7 1 12 12 30 0.625 {segfill 0.4583 3 7 15 15 15}}
{8 1 12 12 30 0.75 {segfill 0.5833 3 7 14 14 14}}
{9 1 12 12 30 0.875 {segfill 0.7083 3 7 13 13 13}}
} 60}
{{
} 30}
{{
{1 12 9 12 24 0.0 {segfill 0.0 6 7 7 7 7}}
{2 1 24 12 30 0.0 {segfill 0.5 5 13 12 11}}
{3 1 28 12 38 0.125 {segfill -0.475 5 12 11 11 10}}
{4 1 24 12 30 0.25 {segfill 0.75 5 11 10 9}}
{5 1 28 12 38 0.375 {segfill -0.225 5 10 9 9 8}}
{6 1 24 12 30 0.5 {segfill 1 5 9 8 15}}
{7 1 28 12 38 0.625 {segfill 0.025 5 8 15 15 14}}
{8 1 24 12 30 0.75 {segfill 1.25 5 15 14 13}}
{9 1 28 12 38 0.875 {segfill 0.275 5 14 13 13 12}}
} 30}
{{
} 60}
]]
,nil
,0
)
end

function segfloweroflife()
fquery([[
{{
{1 1 0 12 0 0.0 {segfill 0 6 12 12 12 12 12 12}}
{2 6 0 12 0 0.0 {segfill 0 6 5 4 4 5 5 5}}
{3 6 0 12 0 0.25 {segfill 0 6 12 12 12 12 12 12}}
{4 6 0 12 0 0.0 {segfill 0 6 5 5 5 5 11 11}}
{5 6 0 12 0 0.0 {segfill 0.1667 6 12 12}}
{6 6 0 12 0 0.053 {segfill 0.1667 6 5 5 11}}
{7 6 0 12 0 0.113 {segfill 0.1667 6 11 5 5}}
{8 6 0 12 0 0.0833 {segfill 0.333 6 12}}
} 60}
{{
{1 1 16 12 0 0.0 {segfill 0 6 12 12 12 12 12 12}}
{2 6 16 12 16 0.0 {segfill 0 6 5 4 4 5 5 5}}
{3 6 16 12 28 0.25 {segfill 0 6 12 12 12 12 12 12}}
{4 6 16 12 32 0.0 {segfill 0 6 5 5 5 5 11 11}}
{5 6 16 12 48 0.0 {segfill 0.1667 6 12 12}}
{6 6 16 12 42 0.053 {segfill 0.1667 6 5 5 11}}
{7 6 16 12 42 0.113 {segfill 0.1667 6 11 5 5}}
{8 6 16 12 56 0.0833 {segfill 0.333 6 12}}
} 60}
{{
} 30}
{{
{1 1 16 12 0 0.0}
{2 6 32 12 28 0.0}
{3 6 16 12 42 0.25}
{4 6 16 12 32 0.0}
{5 6 16 12 48 0.0}
{6 6 16 12 28 0.053}
{7 6 16 12 28 0.113}
{8 6 16 12 16 0.0833}
} 90}
{{
{1 1 16 12 0 0.0}
{2 6 32 12 64 0.0}
{3 6 24 12 42 0.25}
{4 6 24 12 32 0.0}
{5 6 24 12 48 0.0}
{6 6 8 12 28 0.053}
{7 6 8 12 28 0.113}
{8 6 16 12 16 0.0833}
} 90}
{{
} 60}
]]
,'f2f303fafb0b070809fffc0c0dfd'
,0)
end

function segmentoflife()
fquery([[
{{
{9 6 16 6 0 0.0 {segfill 0.0 6 9 10 15}}
{5 6 16 12 28 0.50 {segfill 0 6 6 12 6 12 6 12}}
} 60}
{{
{9 6 16 12 16 0 {segfill 0 3 9 10}}
{5 6 16 12 28 0.25 {segfill 0 6 6 12 6 12 6 12}}
} 60}
{{
{9 6 16 11 16 0 {segfill 0 3 9 10 4}}
{5 6 16 12 28 0.25 {segfill 0 6 6 12 6 12 6 12}}
} 60}
{{
{9 6 16 10 16 0 {segfill 0.1888 3 9 10 6}}
{5 6 16 12 32 0.25 {segfill 0 6 6 12 6 12 6 12}}
} 60}
{{
{9 6 32 9 32 0.25 {segfill 0.25 6 9 10 11 12}}
{5 6 16 12 28 0.30}
} 20}
{{
{9 6 32 8 32 0.25 {segfill 0.25 6 9 10 11 12 14 15}}
{5 6 16 12 32 0.35}
} 20}
{{
{9 6 32 7 16 0.25 {segfill 0.25 6 9 10 11 12 14 15}}
{5 6 16 12 36 0.40}
} 20}
{{
{9 6 32 7 4 0.25 {segfill 0.25 6 9 10 6 12}}
{5 6 16 12 32 0.425}
} 10}
]]
,'f202f404f9fe070809ff0af7'
,0
)
end

function floweroflife()
fquery([[
{{
{1 1 0 11 0 1}
{2 6 0 11 0 2}
{3 6 0 11 0 -1.0}
{4 6 0 11 0 -1.25}
{5 6 0 11 0 0.5}
{6 6 0 11 0 0.61}
{7 6 0 11 0 0.89}
} 1}
{{
{1 1 0 11 0 0.50}
{2 6 0 11 16 1.00}
{3 6 0 11 32 -0.5}
{4 6 0 11 28 -0.75}
{5 6 0 11 48 0.25}
{6 6 0 11 42 0.36}
{7 6 0 11 42 0.54}
} 60}
{{
{1 1 16 11 0 0}
{2 6 16 14 16 0.0}
{3 6 16 10 32 0.0}
{4 6 16 9 28 -0.25}
{5 6 16 6 48 0.0}
{6 6 16 5 42 0.11}
{7 6 16 5 42 0.39}
} 60}
{{
{1 1 16 11 0 0}
{2 6 16 14 16 0.0}
{3 6 16 10 32 0.0}
{4 6 16 9 28 -0.25}
{5 6 16 6 48 0.0}
{6 6 16 5 42 0.11}
{7 6 16 5 42 0.39}
} 20}
{{
{1 1 8 11 0 0}
{2 6 8 14 16 0.0}
{3 6 8 10 32 0.0}
{4 6 8 9 28 -0.25}
{5 6 8 6 48 0.0}
{6 6 8 5 42 0.11}
{7 6 8 5 42 0.39}
} 10}
{{
{1 1 14 11 0 0}
{2 6 14 14 16 0.0}
{3 6 14 10 32 0.0}
{4 6 14 9 28 -0.25}
{5 6 14 6 48 0.0}
{6 6 14 5 42 0.11}
{7 6 14 5 42 0.39}
} 20}
{{
{1 1 128 11 0 0}
{2 6 16 14 128 0.0}
{3 6 16 10 160 0.0}
{4 6 16 9 152 -0.25}
{5 6 16 6 224 0.0}
{6 6 16 5 212 0.11}
{7 6 16 5 212 0.39}
} 60}
]]
,'f202f404f9fe070809ff0af7'
,0,80,160
)
end

function seedoflife()
fquery([[
{{
{1 1 16 7 0 0}
{2 6 16 10 0 0.5}
} 1}
{{
{1 1 16 7 0 0}
{2 6 16 10 16 0.5}
} 30}
{{
} 30}
{{
{1 1 20 7 0 0}
{2 6 20 10 20 0.6}
} 16}
{{
{1 1 16 7 0 0}
{2 6 16 10 16 0.5}
} 30}
{{
} 30}
{{
{1 1 16 7 0 0}
{2 6 16 10 112 0.5}
} 60}
]]
,nil
,0
)
end

__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__label__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000008888888000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000888888888880000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000088888888888888800000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000888888888888888880000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000008888888888888888880000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000008000000000000000088000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000088000000000000000088800000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000088000000000000000088800000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000888000000000000000088880000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000009000000000088800000000000000008888000000000f000000000000000000000000000000000000000000
000000000000000000000000000000000000009999099990000088880000000000000000888880000ffff0ffff00000000000000000000000000000000000000
0000000000000000000000000000000000009999900099999000888800000000000000008888800fffff000fffff000000000000000000000000000000000000
00000000000000000000000000000000009999999000099999908888000000000000000088888ffffff0000fffffff0000000000000000000000000000000000
0000000000000000000000000000000009999999000000999999888800000000000000008888ffffff000000fffffff000000000000000000000000000000000
000000000000000000000000000000009999999000000009999988880000000000000000888ffffff00000000fffffff00000000000000000000000000000000
000000000000000000000000000000009999990000000000999988880000000000000000888fffff0000000000ffffff00000000000000000000000000000000
00000000000000000000000000000009999990000000000009998888000000000000000088fffff000000000000ffffff0000000000000000000000000000000
00000000000000000000000000000009999900000000000000999888000000000000000088ffff00000000000000fffff0000000000000000000000000000000
0000000000000000000000000000009999900000000000000009988800000777777700008ffff0000000000000000fffff000000000000000000000000000000
0000000000000000000000000000009999000000000000000000998800077777777777008fff000000000000000000ffff000000000000000000000000000000
0000000000000000000000000000009990000000000000000000998807777777777777778fff0000000000000000000fff000000000000000000000000000000
0000000000000000000000000000009900000000000000000000099877777777777777778ff000000000000000000000ff000000000000000000000000000000
0000000000000000000000000000009900000000000000000000079777777777777777777f7000000000000000000000ff000000000000000000000000000000
00000000000000000000000000000099900000000000000000007777000777777777770077770000000000000000000fff000000000000000000000000000000
0000000000000000000000000000009999000000000000000000777700000777777700007777000000000000000000ffff000000000000000000000000000000
000000000000000000000000000000999990000000000000000777770000000000000000777770000000000000000fffff000000000000000000000000000000
00000000000000000000000000000009999900000000000000777777000000000000000077777700000000000000fffff0000000000000000000000000000000
0000000000000000000000000000000999999000000000000777777700000000000000007777777000000000000ffffff0000000000000000000000000000000
000000000000000000000000000000009999990000000000777777770000000000000000777777770000000000ffffff00000000000000000000000000000000
00000000000000000000000000000000999999900000000777777777000000000000000077777777700000000fffffff00000000000000000000000000000000
0000000000000000000000000000000aa9999999000000777777777700000000000000007777777777000000fffeeeeeee000000000000000000000000000000
00000000000000000000000000000aaaaa99999990000777777777777700000000000007777777777770000ffeeeeeeeeeee0000000000000000000000000000
000000000000000000000000000aaaaaaaaa99999a007777777777777777000000000777777777777777000eeeeeeeeeeeeeee00000000000000000000000000
00000000000000000000000000aaaaaaaaaaaa9999a7777777777777777770000000777777777777777770eeeeeeeeeeeeeeeee0000000000000000000000000
0000000000000000000000000aaaaaaaaaaaaaaaaaa777777777777777777000000777777777777777777eeeeeeeeeeeeeeeeee0000000000000000000000000
0000000000000000000000000a0000000000000000aa0000000007770000770000070000777700000000770000000000000000ee000000000000000000000000
000000000000000000000000aa0000000000000000777000000007770000777000770000777700000000777000000000000000eee00000000000000000000000
000000000000000000000000aa0000000000000000777000000000770000777000770000777000000000777000000000000000eee00000000000000000000000
00000000000000000000000aaa0000000000000007777700000000770000777707770000777000000007777700000000000000eeee0000000000000000000000
00000000000000000000000aaa0000000000000007777700000000077777777777777777770000000007777700000000000000eeee0000000000000000000000
0000000000000000000000aaaa0000000000000077777770000000000777777777777777000000000077777770000000000000eeeee000000000000000000000
0000000000000000000000aaaa0000000000000077777770000000000007777777777700000000000077777770000000000000eeeee000000000000000000000
0000000000000000000000aaaa0000000000000077777770000000000000777777770000000000000077777770000000000000eeeee000000000000000000000
0000000000000000000000aaaa0000000000000077777770000000000007777777777700000000000077777770000000000000eeeee000000000000000000000
0000000000000000000000aaaa0000000000000077777770000000000777777777777777000000000077777770000000000000eeeee000000000000000000000
0000000000000000000000aaaa0000000000000077777770000000007777777777777777700000000077777770000000000000eeeee000000000000000000000
0000000000000000000000aaaa0000000000000077777770000000077777777777777777700000000077777770000000000000eeeee000000000000000000000
00000000000000000000000aaa0000000000000007777700000000070000777707770000770000000007777700000000000000eeee0000000000000000000000
00000000000000000000000aaa0000000000000007777700000000770000777707770000777000000007777700000000000000eeee0000000000000000000000
000000000000000000000000aa0000000000000000777000000000770000777000770000777000000000777000000000000000eee00000000000000000000000
000000000000000000000000aa00000000000000007770000000077700007770007700007777000000007e7000000000000000eee00000000000000000000000
0000000000000000000000000aaaaaaaaaaaaaaaaaa777777777777777777700000777777777777777777deeeeeeeeeeeeeeeeee000000000000000000000000
000000000000000000000000000aaaaaaaaaaaaaaa07777777777777777700000000077777777777777770ddddeeeeeeeeeeee00000000000000000000000000
00000000000000000000000000000aaaaaaaaaaab0007777777777777700000000000007777777777777000dddddeeeeeeee0000000000000000000000000000
0000000000000000000000000000000aaaaaaabbb0000777777777770000000000000000777777777770000dddddddeeee000000000000000000000000000000
000000000000000000000000000000000bbbbbbb000000777777777700000000000000007777777777000000ddddddd000000000000000000000000000000000
00000000000000000000000000000000bbbbbbb00000000777777777000000000000000077777777700000000ddddddd00000000000000000000000000000000
00000000000000000000000000000000bbbbbb0000000000777777770000000000000000777777770000000000dddddd00000000000000000000000000000000
0000000000000000000000000000000bbbbbb000000000000777777700000000000000007777777000000000000dddddd0000000000000000000000000000000
0000000000000000000000000000000bbbbb00000000000000777777000000000000000077777700000000000000ddddd0000000000000000000000000000000
000000000000000000000000000000bbbbb0000000000000000777770000077777770000777770000000000000000ddddd000000000000000000000000000000
000000000000000000000000000000bbbb000000000000000000777700077777777777007777000000000000000000dddd000000000000000000000000000000
000000000000000000000000000000bbb00000000000000000007777077777777777777777770000000000000000000ddd000000000000000000000000000000
000000000000000000000000000000bb0000000000000000000007b777777777777777777d7000000000000000000000dd000000000000000000000000000000
000000000000000000000000000000bb000000000000000000000bbcc777777777777777cdd000000000000000000000dd000000000000000000000000000000
000000000000000000000000000000bbb0000000000000000000bbbc0007777777777700cddd0000000000000000000ddd000000000000000000000000000000
000000000000000000000000000000bbbb000000000000000000bbbc0000077777770000cddd000000000000000000dddd000000000000000000000000000000
000000000000000000000000000000bbbbb0000000000000000bbbbc0000000000000000cdddd0000000000000000ddddd000000000000000000000000000000
0000000000000000000000000000000bbbbb00000000000000bbbbcc0000000000000000ccdddd00000000000000ddddd0000000000000000000000000000000
0000000000000000000000000000000bbbbbb000000000000bbbbbcc0000000000000000ccddddd000000000000dddddd0000000000000000000000000000000
00000000000000000000000000000000bbbbbb0000000000bbbbbccc0000000000000000cccddddd0000000000dddddd00000000000000000000000000000000
00000000000000000000000000000000bbbbbbb00000000bbbbbbccc0000000000000000cccdddddd00000000ddddddd00000000000000000000000000000000
000000000000000000000000000000000bbbbbbb000000bbbbbbcccc0000000000000000ccccdddddd000000ddddddd000000000000000000000000000000000
0000000000000000000000000000000000bbbbbbb0000bbbbbb0cccc0000000000000000cccccdddddd0000ddddddd0000000000000000000000000000000000
000000000000000000000000000000000000bbbbb000bbbbb000cccc0000000000000000ccccc00ddddd000ddddd000000000000000000000000000000000000
00000000000000000000000000000000000000bbbb0bbbb00000cccc0000000000000000ccccc0000dddd0dddd00000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000cccc0000000000000000ccccc000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000ccc0000000000000000cccc0000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000ccc0000000000000000cccc0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000cc0000000000000000ccc00000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000cc0000000000000000ccc00000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000ccccccccccccccccccc000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000ccccccccccccccc00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000ccccccccccc0000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000ccccccc000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

